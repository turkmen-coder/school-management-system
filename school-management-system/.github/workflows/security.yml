name: Security Scans

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.14.0'

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: pnpm audit --audit-level high --json > audit-results.json
        continue-on-error: true

      - name: Check for high/critical vulnerabilities
        run: |
          HIGH_VULN=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULN=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "High vulnerabilities: $HIGH_VULN"
          echo "Critical vulnerabilities: $CRITICAL_VULN"
          
          if [ "$CRITICAL_VULN" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found!"
            exit 1
          elif [ "$HIGH_VULN" -gt 0 ]; then
            echo "⚠️ High severity vulnerabilities found!"
            exit 1
          else
            echo "✅ No high/critical vulnerabilities found"
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: npm-audit-results
          path: audit-results.json

  code-security-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  container-security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        service:
          - iam
          - crm
          - enrollment
          - exam
          - documents
          - notifications
          - admin
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -f infra/docker/Dockerfile.${{ matrix.service }} -t school-management-${{ matrix.service }}:test .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: school-management-${{ matrix.service }}:test
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Check for critical vulnerabilities
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/tmp aquasec/trivy image \
            --exit-code 1 --severity CRITICAL \
            school-management-${{ matrix.service }}:test

  infrastructure-security-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov scan on Kubernetes manifests
        run: |
          checkov -d infra/kubernetes/ \
            --framework kubernetes \
            --output cli --output json --output-file-path console,checkov-k8s-results.json \
            --soft-fail

      - name: Run Checkov scan on Docker files
        run: |
          checkov -d infra/docker/ \
            --framework dockerfile \
            --output cli --output json --output-file-path console,checkov-docker-results.json \
            --soft-fail

      - name: Run Checkov scan on Terraform files
        run: |
          checkov -d infra/terraform/ \
            --framework terraform \
            --output cli --output json --output-file-path console,checkov-terraform-results.json \
            --soft-fail

      - name: Upload Checkov results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: checkov-results
          path: |
            checkov-k8s-results.json
            checkov-docker-results.json
            checkov-terraform-results.json

  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install license checker
        run: npm install -g license-checker

      - name: Check licenses
        run: |
          license-checker --json --out license-report.json
          
          # Check for restricted licenses
          RESTRICTED_LICENSES="GPL-2.0,GPL-3.0,AGPL-1.0,AGPL-3.0"
          
          if grep -q -E "$RESTRICTED_LICENSES" license-report.json; then
            echo "❌ Restricted licenses found!"
            grep -E "$RESTRICTED_LICENSES" license-report.json
            exit 1
          else
            echo "✅ No restricted licenses found"
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: license-report.json

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, secret-scan, container-security-scan, infrastructure-security-scan, license-scan]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "| Scan Type | Status |" >> security-summary.md
          echo "|-----------|--------|" >> security-summary.md
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> security-summary.md
          echo "| Code Security Scan | ${{ needs.code-security-scan.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> security-summary.md
          echo "| Secret Scan | ${{ needs.secret-scan.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> security-summary.md
          echo "| Container Security Scan | ${{ needs.container-security-scan.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> security-summary.md
          echo "| Infrastructure Security Scan | ${{ needs.infrastructure-security-scan.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> security-summary.md
          echo "| License Compliance | ${{ needs.license-scan.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  notify-security:
    name: Notify Security Results
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, secret-scan, container-security-scan, infrastructure-security-scan, license-scan]
    if: always() && (needs.dependency-scan.result == 'failure' || needs.code-security-scan.result == 'failure' || needs.secret-scan.result == 'failure' || needs.container-security-scan.result == 'failure' || needs.infrastructure-security-scan.result == 'failure' || needs.license-scan.result == 'failure')
    steps:
      - name: Notify security team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "🚨 Security scan failures detected in School Management System"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}