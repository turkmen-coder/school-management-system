name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.14.0'

jobs:
  setup:
    name: Setup and Cache
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint

      - name: Check Prettier formatting
        run: pnpm exec prettier --check "**/*.{js,ts,tsx,json,md,yml,yaml}"

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        project:
          - packages/auth
          - packages/kernel
          - packages/messaging
          - packages/monitoring
          - packages/pdf
          - packages/persistence
          - services/iam
          - services/crm
          - services/enrollment
          - services/exam
          - services/documents
          - services/notifications
          - apps/admin
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check ${{ matrix.project }}
        run: cd ${{ matrix.project }} && pnpm run type-check
        continue-on-error: false

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        project:
          - packages/auth
          - packages/kernel
          - packages/messaging
          - packages/monitoring
          - packages/pdf
          - packages/persistence
          - services/iam
          - services/crm
          - services/enrollment
          - services/exam
          - services/documents
          - services/notifications
          - apps/admin
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests for ${{ matrix.project }}
        run: cd ${{ matrix.project }} && pnpm test:unit
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ${{ matrix.project }}/coverage/lcov.info
          flags: ${{ matrix.project }}
          name: ${{ matrix.project }}-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: school_management_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        run: |
          cd packages/persistence
          pnpm run db:migrate:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/school_management_test

      - name: Run integration tests
        run: pnpm test:integration
        env:
          CI: true
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/school_management_test
          REDIS_URL: redis://localhost:6379

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, type-check, unit-tests]
    strategy:
      matrix:
        project:
          - packages/auth
          - packages/kernel
          - packages/messaging
          - packages/monitoring
          - packages/pdf
          - packages/persistence
          - services/iam
          - services/crm
          - services/enrollment
          - services/exam
          - services/documents
          - services/notifications
          - apps/admin
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build ${{ matrix.project }}
        run: cd ${{ matrix.project }} && pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.project }}
          path: ${{ matrix.project }}/dist/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build, integration-tests]
    if: github.event_name == 'push'
    strategy:
      matrix:
        service:
          - iam
          - crm
          - enrollment
          - exam
          - documents
          - notifications
          - admin
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/school-management-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/docker/Dockerfile.${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: always()
    steps:
      - name: Notify on success
        if: ${{ needs.docker-build.result == 'success' && needs.security-scan.result == 'success' }}
        run: echo "✅ CI Pipeline completed successfully"

      - name: Notify on failure
        if: ${{ needs.docker-build.result == 'failure' || needs.security-scan.result == 'failure' }}
        run: echo "❌ CI Pipeline failed"